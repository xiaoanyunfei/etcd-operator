/*
Copyright 2023 The etcd-operator Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta2

import (
	v1 "k8s.io/api/core/v1"
)

// PodPolicyApplyConfiguration represents an declarative configuration of the PodPolicy type for use
// with apply.
type PodPolicyApplyConfiguration struct {
	Labels                    map[string]string             `json:"labels,omitempty"`
	NodeSelector              map[string]string             `json:"nodeSelector,omitempty"`
	Affinity                  *v1.Affinity                  `json:"affinity,omitempty"`
	AntiAffinity              *bool                         `json:"antiAffinity,omitempty"`
	Resources                 *v1.ResourceRequirements      `json:"resources,omitempty"`
	Tolerations               []v1.Toleration               `json:"tolerations,omitempty"`
	EtcdEnv                   []v1.EnvVar                   `json:"etcdEnv,omitempty"`
	PersistentVolumeClaimSpec *v1.PersistentVolumeClaimSpec `json:"persistentVolumeClaimSpec,omitempty"`
	Annotations               map[string]string             `json:"annotations,omitempty"`
	BusyboxImage              *string                       `json:"busyboxImage,omitempty"`
	SecurityContext           *v1.PodSecurityContext        `json:"securityContext,omitempty"`
	DNSTimeoutInSecond        *int64                        `json:"DNSTimeoutInSecond,omitempty"`
	ClusterDomain             *string                       `json:"ClusterDomain,omitempty"`
}

// PodPolicyApplyConfiguration constructs an declarative configuration of the PodPolicy type for use with
// apply.
func PodPolicy() *PodPolicyApplyConfiguration {
	return &PodPolicyApplyConfiguration{}
}

// WithLabels puts the entries into the Labels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Labels field,
// overwriting an existing map entries in Labels field with the same key.
func (b *PodPolicyApplyConfiguration) WithLabels(entries map[string]string) *PodPolicyApplyConfiguration {
	if b.Labels == nil && len(entries) > 0 {
		b.Labels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Labels[k] = v
	}
	return b
}

// WithNodeSelector puts the entries into the NodeSelector field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the NodeSelector field,
// overwriting an existing map entries in NodeSelector field with the same key.
func (b *PodPolicyApplyConfiguration) WithNodeSelector(entries map[string]string) *PodPolicyApplyConfiguration {
	if b.NodeSelector == nil && len(entries) > 0 {
		b.NodeSelector = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.NodeSelector[k] = v
	}
	return b
}

// WithAffinity sets the Affinity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Affinity field is set to the value of the last call.
func (b *PodPolicyApplyConfiguration) WithAffinity(value v1.Affinity) *PodPolicyApplyConfiguration {
	b.Affinity = &value
	return b
}

// WithAntiAffinity sets the AntiAffinity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AntiAffinity field is set to the value of the last call.
func (b *PodPolicyApplyConfiguration) WithAntiAffinity(value bool) *PodPolicyApplyConfiguration {
	b.AntiAffinity = &value
	return b
}

// WithResources sets the Resources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resources field is set to the value of the last call.
func (b *PodPolicyApplyConfiguration) WithResources(value v1.ResourceRequirements) *PodPolicyApplyConfiguration {
	b.Resources = &value
	return b
}

// WithTolerations adds the given value to the Tolerations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tolerations field.
func (b *PodPolicyApplyConfiguration) WithTolerations(values ...v1.Toleration) *PodPolicyApplyConfiguration {
	for i := range values {
		b.Tolerations = append(b.Tolerations, values[i])
	}
	return b
}

// WithEtcdEnv adds the given value to the EtcdEnv field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the EtcdEnv field.
func (b *PodPolicyApplyConfiguration) WithEtcdEnv(values ...v1.EnvVar) *PodPolicyApplyConfiguration {
	for i := range values {
		b.EtcdEnv = append(b.EtcdEnv, values[i])
	}
	return b
}

// WithPersistentVolumeClaimSpec sets the PersistentVolumeClaimSpec field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PersistentVolumeClaimSpec field is set to the value of the last call.
func (b *PodPolicyApplyConfiguration) WithPersistentVolumeClaimSpec(value v1.PersistentVolumeClaimSpec) *PodPolicyApplyConfiguration {
	b.PersistentVolumeClaimSpec = &value
	return b
}

// WithAnnotations puts the entries into the Annotations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Annotations field,
// overwriting an existing map entries in Annotations field with the same key.
func (b *PodPolicyApplyConfiguration) WithAnnotations(entries map[string]string) *PodPolicyApplyConfiguration {
	if b.Annotations == nil && len(entries) > 0 {
		b.Annotations = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Annotations[k] = v
	}
	return b
}

// WithBusyboxImage sets the BusyboxImage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BusyboxImage field is set to the value of the last call.
func (b *PodPolicyApplyConfiguration) WithBusyboxImage(value string) *PodPolicyApplyConfiguration {
	b.BusyboxImage = &value
	return b
}

// WithSecurityContext sets the SecurityContext field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SecurityContext field is set to the value of the last call.
func (b *PodPolicyApplyConfiguration) WithSecurityContext(value v1.PodSecurityContext) *PodPolicyApplyConfiguration {
	b.SecurityContext = &value
	return b
}

// WithDNSTimeoutInSecond sets the DNSTimeoutInSecond field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DNSTimeoutInSecond field is set to the value of the last call.
func (b *PodPolicyApplyConfiguration) WithDNSTimeoutInSecond(value int64) *PodPolicyApplyConfiguration {
	b.DNSTimeoutInSecond = &value
	return b
}

// WithClusterDomain sets the ClusterDomain field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClusterDomain field is set to the value of the last call.
func (b *PodPolicyApplyConfiguration) WithClusterDomain(value string) *PodPolicyApplyConfiguration {
	b.ClusterDomain = &value
	return b
}
